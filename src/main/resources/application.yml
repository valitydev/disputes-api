server:
  port: ${server.port}

management:
  server:
    port: ${management.port}
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  prometheus:
    metrics:
      export:
        enabled: true

service:
  invoicing:
    url: http://localhost:8022/change_it
    networkTimeout: 5000
  dominant:
    url: http://localhost:8022/change_it
    networkTimeout: 5000
    cache:
      currencies:
        poolSize: 10
        ttlSec: 86400
      terminals:
        poolSize: 30
        ttlSec: 60
      providers:
        poolSize: 20
        ttlSec: 300
      proxies:
        poolSize: 30
        ttlSec: 30
      shops:
        poolSize: 30
        ttlSec: 300
  bouncer:
    url: http://localhost:8022/change_it
    networkTimeout: 10000
    deployment-id: production
    realm: external
    rule-set-id: change_it
    operation-id: change_it
    auth:
      enabled: false
  tokenKeeper:
    url: http://localhost:8022/change_it
    networkTimeout: 5000
  file-storage:
    url: http://localhost:8022/change_it
    networkTimeout: 5000
    urlLifeTimeDuration: 360
    timeZone: Europe/Moscow
  disputes-tg-bot:
    provider:
      url: http://localhost:8022/change_it
      networkTimeout: 5000
      enabled: false
    admin:
      url: http://localhost:8022/change_it
      networkTimeout: 5000
      enabled: false
  adapters:
    connection:
      timeoutSec: 30
      poolSize: 10
      ttlMin: 1440
      reconnect:
        maxAttempts: 3
        initialDelaySec: 1

spring:
  application:
    name: ${project.name}
  output:
    ansi:
      enabled: always
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/disputes
    username: postgres
    password: postgres
    hikari:
      idle-timeout: 30000
      leak-detection-threshold: 5300
      data-source-properties:
        prepareThreshold: 0
      maximum-pool-size: 20
      max-lifetime: 300000
      minimum-idle: 2

info:
  version: ${project.version}
  stage: dev

auth:
  enabled: true

dispute:
  maxRequestSize: 7
  batchSize: 1
  notificationsMaxAttempts: 5
  fixedDelayCreated: 5000
  fixedDelayPending: 5000
  fixedDelayForgotten: 5000
  fixedDelayNotification: 5000
  initialDelayCreated: 5000
  initialDelayPending: 5000
  initialDelayForgotten: 5000
  initialDelayNotification: 5000
  isScheduleCreatedEnabled: true
  isSchedulePendingEnabled: true
  isScheduleForgottenEnabled: true
  isScheduleNotificationEnabled: true

provider:
  payments:
    batchSize: 1
    fixedDelayCreateAdjustments: 5000
    initialDelayCreateAdjustments: 5000
    isProviderCallbackEnabled: false
    isScheduleCreateAdjustmentsEnabled: true

time:
  config:
    max-time-polling-min: 600

testcontainers:
  postgresql:
    tag: '14.12'

http-client:
  requestTimeout: 60000
  poolTimeout: 10000
  connectionTimeout: 10000
  maxTotalPooling: 200
  defaultMaxPerRoute: 200

otel:
  resource: http://localhost:4318/v1/traces
  timeout: 60000
  enabled: false

async:
  core-pool-size: 5
  max-pool-size: 10
  queue-capacity: 50
